com/cossacklabs/themis/AsymmetricKey = Com.Cossacklabs.Themis.AsymmetricKey
  <init>([B)V = .ctor(byte[])
  KEYTYPE_EC = KeytypeEc
  KEYTYPE_RSA = KeytypeRsa
  toByteArray()[B = ToByteArray()
com/cossacklabs/themis/BuildConfig = Com.Cossacklabs.Themis.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/cossacklabs/themis/IKey = Com.Cossacklabs.Themis.IKey
  toByteArray()[B = ToByteArray()
com/cossacklabs/themis/InvalidArgumentException = Com.Cossacklabs.Themis.InvalidArgumentException
  <init>(Ljava/lang/String;)V = .ctor(string)
com/cossacklabs/themis/ISessionCallbacks = Com.Cossacklabs.Themis.ISessionCallbacks
  getPublicKeyForId(Lcom/cossacklabs/themis/SecureSession;[B)Lcom/cossacklabs/themis/PublicKey; = GetPublicKeyForId(Com.Cossacklabs.Themis.SecureSession, byte[])
  stateChanged(Lcom/cossacklabs/themis/SecureSession;)V = StateChanged(Com.Cossacklabs.Themis.SecureSession)
com/cossacklabs/themis/ITransportSessionCallbacks = Com.Cossacklabs.Themis.ITransportSessionCallbacks
  read()[B = Read()
  write([B)V = Write(byte[])
com/cossacklabs/themis/KeyGenerationException = Com.Cossacklabs.Themis.KeyGenerationException
com/cossacklabs/themis/Keypair = Com.Cossacklabs.Themis.Keypair
  <init>(Lcom/cossacklabs/themis/PrivateKey;Lcom/cossacklabs/themis/PublicKey;)V = .ctor(Com.Cossacklabs.Themis.PrivateKey, Com.Cossacklabs.Themis.PublicKey)
  getPrivateKey()Lcom/cossacklabs/themis/PrivateKey; = PrivateKey
  getPublicKey()Lcom/cossacklabs/themis/PublicKey; = PublicKey
com/cossacklabs/themis/KeypairGenerator = Com.Cossacklabs.Themis.KeypairGenerator
  generateKeypair()Lcom/cossacklabs/themis/Keypair; = GenerateKeypair()
  generateKeypair(I)Lcom/cossacklabs/themis/Keypair; = GenerateKeypair(int)
com/cossacklabs/themis/NullArgumentException = Com.Cossacklabs.Themis.NullArgumentException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
com/cossacklabs/themis/PrivateKey = Com.Cossacklabs.Themis.PrivateKey
  <init>([B)V = .ctor(byte[])
com/cossacklabs/themis/PublicKey = Com.Cossacklabs.Themis.PublicKey
  <init>([B)V = .ctor(byte[])
com/cossacklabs/themis/SecureCell = Com.Cossacklabs.Themis.SecureCell
  <init>([B)V = .ctor(byte[])
  <init>([BI)V = .ctor(byte[], int)
  <init>(I)V = .ctor(int)
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;I)V = .ctor(string, int)
  MODE_CONTEXT_IMPRINT = ModeContextImprint
  MODE_SEAL = ModeSeal
  MODE_TOKEN_PROTECT = ModeTokenProtect
  ContextImprintWithKey([B)Lcom/cossacklabs/themis/SecureCell$ContextImprint; = ContextImprintWithKey(byte[])
  ContextImprintWithKey(Lcom/cossacklabs/themis/SymmetricKey;)Lcom/cossacklabs/themis/SecureCell$ContextImprint; = ContextImprintWithKey(Com.Cossacklabs.Themis.SymmetricKey)
  protect([B[B)Lcom/cossacklabs/themis/SecureCellData; = Protect(byte[], byte[])
  protect([B[B[B)Lcom/cossacklabs/themis/SecureCellData; = Protect(byte[], byte[], byte[])
  protect(Ljava/lang/String;[B)Lcom/cossacklabs/themis/SecureCellData; = Protect(string, byte[])
  protect(Ljava/lang/String;Ljava/lang/String;[B)Lcom/cossacklabs/themis/SecureCellData; = Protect(string, string, byte[])
  SealWithKey([B)Lcom/cossacklabs/themis/SecureCell$Seal; = SealWithKey(byte[])
  SealWithKey(Lcom/cossacklabs/themis/SymmetricKey;)Lcom/cossacklabs/themis/SecureCell$Seal; = SealWithKey(Com.Cossacklabs.Themis.SymmetricKey)
  SealWithPassphrase([B)Lcom/cossacklabs/themis/SecureCell$Seal; = SealWithPassphrase(byte[])
  SealWithPassphrase(Ljava/lang/String;)Lcom/cossacklabs/themis/SecureCell$Seal; = SealWithPassphrase(string)
  SealWithPassphrase(Ljava/lang/String;Ljava/nio/charset/Charset;)Lcom/cossacklabs/themis/SecureCell$Seal; = SealWithPassphrase(string, Java.Nio.Charset.Charset)
  TokenProtectWithKey([B)Lcom/cossacklabs/themis/SecureCell$TokenProtect; = TokenProtectWithKey(byte[])
  TokenProtectWithKey(Lcom/cossacklabs/themis/SymmetricKey;)Lcom/cossacklabs/themis/SecureCell$TokenProtect; = TokenProtectWithKey(Com.Cossacklabs.Themis.SymmetricKey)
  unprotect([B[BLcom/cossacklabs/themis/SecureCellData;)[B = Unprotect(byte[], byte[], Com.Cossacklabs.Themis.SecureCellData)
  unprotect([BLcom/cossacklabs/themis/SecureCellData;)[B = Unprotect(byte[], Com.Cossacklabs.Themis.SecureCellData)
  unprotect(Ljava/lang/String;Lcom/cossacklabs/themis/SecureCellData;)[B = Unprotect(string, Com.Cossacklabs.Themis.SecureCellData)
  unprotect(Ljava/lang/String;Ljava/lang/String;Lcom/cossacklabs/themis/SecureCellData;)[B = Unprotect(string, string, Com.Cossacklabs.Themis.SecureCellData)
com/cossacklabs/themis/SecureCellData = Com.Cossacklabs.Themis.SecureCellData
  <init>([B[B)V = .ctor(byte[], byte[])
  hasAdditionalData()Z = HasAdditionalData
  component1()[B = Component1()
  component2()[B = Component2()
  getAdditionalData()[B = GetAdditionalData()
  getProtectedData()[B = GetProtectedData()
com/cossacklabs/themis/SecureCellException = Com.Cossacklabs.Themis.SecureCellException
  <init>()V = .ctor()
com/cossacklabs/themis/SecureCompare = Com.Cossacklabs.Themis.SecureCompare
  <init>()V = .ctor()
  <init>([B)V = .ctor(byte[])
  <init>(Ljava/lang/String;)V = .ctor(string)
  getResult()Lcom/cossacklabs/themis/SecureCompare$CompareResult; = Result
  appendSecret([B)V = AppendSecret(byte[])
  begin()[B = Begin()
  close()V = Close()
  proceed([B)[B = Proceed(byte[])
com/cossacklabs/themis/SecureCompareException = Com.Cossacklabs.Themis.SecureCompareException
  <init>()V = .ctor()
com/cossacklabs/themis/SecureMessage = Com.Cossacklabs.Themis.SecureMessage
  <init>(Lcom/cossacklabs/themis/PrivateKey;)V = .ctor(Com.Cossacklabs.Themis.PrivateKey)
  <init>(Lcom/cossacklabs/themis/PrivateKey;Lcom/cossacklabs/themis/PublicKey;)V = .ctor(Com.Cossacklabs.Themis.PrivateKey, Com.Cossacklabs.Themis.PublicKey)
  <init>(Lcom/cossacklabs/themis/PublicKey;)V = .ctor(Com.Cossacklabs.Themis.PublicKey)
  sign([B)[B = Sign(byte[])
  unwrap([B)[B = Unwrap(byte[])
  unwrap([BLcom/cossacklabs/themis/PublicKey;)[B = Unwrap(byte[], Com.Cossacklabs.Themis.PublicKey)
  verify([B)[B = Verify(byte[])
  verify([BLcom/cossacklabs/themis/PublicKey;)[B = Verify(byte[], Com.Cossacklabs.Themis.PublicKey)
  wrap([B)[B = Wrap(byte[])
  wrap([BLcom/cossacklabs/themis/PublicKey;)[B = Wrap(byte[], Com.Cossacklabs.Themis.PublicKey)
com/cossacklabs/themis/SecureMessageWrapException = Com.Cossacklabs.Themis.SecureMessageWrapException
  <init>()V = .ctor()
com/cossacklabs/themis/SecureServerSocket = Com.Cossacklabs.Themis.SecureServerSocket
  <init>(I[BLcom/cossacklabs/themis/PrivateKey;Lcom/cossacklabs/themis/ISessionCallbacks;)V = .ctor(int, byte[], Com.Cossacklabs.Themis.PrivateKey, Com.Cossacklabs.Themis.ISessionCallbacks)
com/cossacklabs/themis/SecureSession = Com.Cossacklabs.Themis.SecureSession
  <init>([BLcom/cossacklabs/themis/PrivateKey;Lcom/cossacklabs/themis/ISessionCallbacks;)V = .ctor(byte[], Com.Cossacklabs.Themis.PrivateKey, Com.Cossacklabs.Themis.ISessionCallbacks)
  <init>(Ljava/lang/String;Lcom/cossacklabs/themis/PrivateKey;Lcom/cossacklabs/themis/ISessionCallbacks;)V = .ctor(string, Com.Cossacklabs.Themis.PrivateKey, Com.Cossacklabs.Themis.ISessionCallbacks)
  callbacks = Callbacks
  isEstablished()Z = IsEstablished
  close()V = Close()
  generateConnectRequest()[B = GenerateConnectRequest()
  getState()Lcom/cossacklabs/themis/SecureSession$State; = GetState()
  restore([BLcom/cossacklabs/themis/ISessionCallbacks;)Lcom/cossacklabs/themis/SecureSession; = Restore(byte[], Com.Cossacklabs.Themis.ISessionCallbacks)
  save()[B = Save()
  unwrap([B)Lcom/cossacklabs/themis/SecureSession$UnwrapResult; = Unwrap(byte[])
  wrap([B)[B = Wrap(byte[])
com/cossacklabs/themis/SecureSessionException = Com.Cossacklabs.Themis.SecureSessionException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
com/cossacklabs/themis/SecureSocket = Com.Cossacklabs.Themis.SecureSocket
  <init>([BLcom/cossacklabs/themis/PrivateKey;Lcom/cossacklabs/themis/ISessionCallbacks;)V = .ctor(byte[], Com.Cossacklabs.Themis.PrivateKey, Com.Cossacklabs.Themis.ISessionCallbacks)
  <init>(Ljava/net/InetAddress;I[BLcom/cossacklabs/themis/PrivateKey;Lcom/cossacklabs/themis/ISessionCallbacks;)V = .ctor(Java.Net.InetAddress, int, byte[], Com.Cossacklabs.Themis.PrivateKey, Com.Cossacklabs.Themis.ISessionCallbacks)
com/cossacklabs/themis/SecureTransportSession = Com.Cossacklabs.Themis.SecureTransportSession
  <init>([BLcom/cossacklabs/themis/PrivateKey;Lcom/cossacklabs/themis/ITransportSessionCallbacks;)V = .ctor(byte[], Com.Cossacklabs.Themis.PrivateKey, Com.Cossacklabs.Themis.ITransportSessionCallbacks)
  <init>(Ljava/lang/String;Lcom/cossacklabs/themis/PrivateKey;Lcom/cossacklabs/themis/ITransportSessionCallbacks;)V = .ctor(string, Com.Cossacklabs.Themis.PrivateKey, Com.Cossacklabs.Themis.ITransportSessionCallbacks)
  connect()V = Connect()
  read()[B = Read()
  write([B)V = Write(byte[])
com/cossacklabs/themis/SymmetricKey = Com.Cossacklabs.Themis.SymmetricKey
  <init>()V = .ctor()
  <init>([B)V = .ctor(byte[])
  toByteArray()[B = ToByteArray()
